-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_modulate_systolic_tile_modulate_Loop_l_data_load_k8_proc21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_fifo_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_fifo_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    A_fifo_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    A_fifo_full_n : IN STD_LOGIC;
    A_fifo_write : OUT STD_LOGIC;
    B_fifo_12_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_12_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_12_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_12_full_n : IN STD_LOGIC;
    B_fifo_12_write : OUT STD_LOGIC;
    B_fifo_10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_10_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_10_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_10_full_n : IN STD_LOGIC;
    B_fifo_10_write : OUT STD_LOGIC;
    B_fifo_8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_8_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_8_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_8_full_n : IN STD_LOGIC;
    B_fifo_8_write : OUT STD_LOGIC;
    B_fifo_6_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_6_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_6_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_6_full_n : IN STD_LOGIC;
    B_fifo_6_write : OUT STD_LOGIC;
    B_fifo_4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_4_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_4_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_4_full_n : IN STD_LOGIC;
    B_fifo_4_write : OUT STD_LOGIC;
    B_fifo_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_2_full_n : IN STD_LOGIC;
    B_fifo_2_write : OUT STD_LOGIC;
    B_fifo_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_full_n : IN STD_LOGIC;
    B_fifo_write : OUT STD_LOGIC;
    B_fifo_14_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_fifo_14_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_14_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    B_fifo_14_full_n : IN STD_LOGIC;
    B_fifo_14_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    v168_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v168_0_ce0 : OUT STD_LOGIC;
    v168_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_0_ce0 : OUT STD_LOGIC;
    v169_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_1_ce0 : OUT STD_LOGIC;
    v169_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_2_ce0 : OUT STD_LOGIC;
    v169_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_3_ce0 : OUT STD_LOGIC;
    v169_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_4_ce0 : OUT STD_LOGIC;
    v169_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_5_ce0 : OUT STD_LOGIC;
    v169_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_6_ce0 : OUT STD_LOGIC;
    v169_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v169_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    v169_7_ce0 : OUT STD_LOGIC;
    v169_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of systolic_modulate_systolic_tile_modulate_Loop_l_data_load_k8_proc21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal or_ln578_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln578_reg_633_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_reg_682 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln583_reg_682_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln578_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal A_fifo_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal B_fifo_blk_n : STD_LOGIC;
    signal B_fifo_2_blk_n : STD_LOGIC;
    signal B_fifo_4_blk_n : STD_LOGIC;
    signal B_fifo_6_blk_n : STD_LOGIC;
    signal B_fifo_8_blk_n : STD_LOGIC;
    signal B_fifo_10_blk_n : STD_LOGIC;
    signal B_fifo_12_blk_n : STD_LOGIC;
    signal B_fifo_14_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln578_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln578_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v168_0_addr_reg_637 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln583_fu_415_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_324_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln578_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_98 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln583_fu_419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (3 downto 0);
    signal k8_fu_102 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln578_1_fu_394_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_k8_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_106 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln578_1_fu_356_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal v169_7_load1_fu_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v169_6_load3_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v169_5_load5_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v169_4_load7_fu_122 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v169_3_load9_fu_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v169_2_load11_fu_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v169_1_load13_fu_134 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v169_0_load15_fu_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln585_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln583_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln578_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln578_fu_386_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal v179_fu_509_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal v179_fu_509_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_498 : BOOLEAN;
    signal ap_condition_329 : BOOLEAN;
    signal v179_fu_509_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal v179_fu_509_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal v179_fu_509_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal v179_fu_509_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal v179_fu_509_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal v179_fu_509_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal v179_fu_509_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal v179_fu_509_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component systolic_modulate_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component systolic_modulate_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U18 : component systolic_modulate_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => v169_0_load15_fu_138,
        din1 => v169_1_load13_fu_134,
        din2 => v169_2_load11_fu_130,
        din3 => v169_3_load9_fu_126,
        din4 => v169_4_load7_fu_122,
        din5 => v169_5_load5_fu_118,
        din6 => v169_6_load3_fu_114,
        din7 => v169_7_load1_fu_110,
        def => v179_fu_509_p17,
        sel => trunc_ln583_reg_682_pp0_iter1_reg,
        dout => v179_fu_509_p19);

    flow_control_loop_pipe_U : component systolic_modulate_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_329)) then
                if ((icmp_ln578_fu_350_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_106 <= add_ln578_1_fu_356_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_106 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    k8_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_329)) then
                if ((icmp_ln578_fu_350_p2 = ap_const_lv1_0)) then 
                    k8_fu_102 <= select_ln578_1_fu_394_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k8_fu_102 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_329)) then
                if ((icmp_ln578_fu_350_p2 = ap_const_lv1_0)) then 
                    n_fu_98 <= add_ln583_fu_419_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_98 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln578_reg_629 <= icmp_ln578_fu_350_p2;
                or_ln578_reg_633 <= or_ln578_fu_380_p2;
                or_ln578_reg_633_pp0_iter1_reg <= or_ln578_reg_633;
                trunc_ln583_reg_682 <= trunc_ln583_fu_415_p1;
                trunc_ln583_reg_682_pp0_iter1_reg <= trunc_ln583_reg_682;
                v168_0_addr_reg_637 <= zext_ln578_fu_402_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln578_reg_633 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v169_0_load15_fu_138 <= v169_0_q0;
                v169_1_load13_fu_134 <= v169_1_q0;
                v169_2_load11_fu_130 <= v169_2_q0;
                v169_3_load9_fu_126 <= v169_3_q0;
                v169_4_load7_fu_122 <= v169_4_q0;
                v169_5_load5_fu_118 <= v169_5_q0;
                v169_6_load3_fu_114 <= v169_6_q0;
                v169_7_load1_fu_110 <= v169_7_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    A_fifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, A_fifo_full_n, or_ln578_reg_633_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((or_ln578_reg_633_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            A_fifo_blk_n <= A_fifo_full_n;
        else 
            A_fifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_fifo_din <= v168_0_q0;

    A_fifo_write_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln578_reg_633_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln578_reg_633_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_fifo_write <= ap_const_logic_1;
        else 
            A_fifo_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_10_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_10_full_n, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_10_blk_n <= B_fifo_10_full_n;
        else 
            B_fifo_10_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_10_din <= bitcast_ln585_fu_548_p1;

    B_fifo_10_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_10_write <= ap_const_logic_1;
        else 
            B_fifo_10_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_12_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, B_fifo_12_full_n, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_12_blk_n <= B_fifo_12_full_n;
        else 
            B_fifo_12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_12_din <= bitcast_ln585_fu_548_p1;

    B_fifo_12_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_12_write <= ap_const_logic_1;
        else 
            B_fifo_12_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_14_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_14_full_n, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_14_blk_n <= B_fifo_14_full_n;
        else 
            B_fifo_14_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_14_din <= bitcast_ln585_fu_548_p1;

    B_fifo_14_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_14_write <= ap_const_logic_1;
        else 
            B_fifo_14_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_2_full_n, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_2_blk_n <= B_fifo_2_full_n;
        else 
            B_fifo_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_2_din <= bitcast_ln585_fu_548_p1;

    B_fifo_2_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_2_write <= ap_const_logic_1;
        else 
            B_fifo_2_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_4_full_n, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_4_blk_n <= B_fifo_4_full_n;
        else 
            B_fifo_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_4_din <= bitcast_ln585_fu_548_p1;

    B_fifo_4_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_4_write <= ap_const_logic_1;
        else 
            B_fifo_4_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_6_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_6_full_n, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_6_blk_n <= B_fifo_6_full_n;
        else 
            B_fifo_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_6_din <= bitcast_ln585_fu_548_p1;

    B_fifo_6_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_6_write <= ap_const_logic_1;
        else 
            B_fifo_6_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_8_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_8_full_n, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_8_blk_n <= B_fifo_8_full_n;
        else 
            B_fifo_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_8_din <= bitcast_ln585_fu_548_p1;

    B_fifo_8_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_8_write <= ap_const_logic_1;
        else 
            B_fifo_8_write <= ap_const_logic_0;
        end if; 
    end process;


    B_fifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_full_n, ap_block_pp0_stage0)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_fifo_blk_n <= B_fifo_full_n;
        else 
            B_fifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_fifo_din <= bitcast_ln585_fu_548_p1;

    B_fifo_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln583_reg_682_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_fifo_write <= ap_const_logic_1;
        else 
            B_fifo_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln578_1_fu_356_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln578_fu_368_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k8_load) + unsigned(ap_const_lv4_1));
    add_ln583_fu_419_p2 <= std_logic_vector(unsigned(select_ln578_fu_386_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(A_fifo_full_n, or_ln578_reg_633_pp0_iter1_reg, B_fifo_12_full_n, trunc_ln583_reg_682_pp0_iter1_reg, B_fifo_10_full_n, B_fifo_8_full_n, B_fifo_6_full_n, B_fifo_4_full_n, B_fifo_2_full_n, B_fifo_full_n, B_fifo_14_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_4) and (ap_const_logic_0 = B_fifo_8_full_n)) or ((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_5) and (ap_const_logic_0 = B_fifo_10_full_n)) or ((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_6) and (ap_const_logic_0 = B_fifo_12_full_n)) or ((or_ln578_reg_633_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_0 = A_fifo_full_n)) or ((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_7) and (ap_const_logic_0 = B_fifo_14_full_n)) or ((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_0) and (ap_const_logic_0 = B_fifo_full_n)) or ((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_1) and (ap_const_logic_0 = B_fifo_2_full_n)) or ((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_2) and (ap_const_logic_0 = B_fifo_4_full_n)) or ((trunc_ln583_reg_682_pp0_iter1_reg = ap_const_lv3_3) and (ap_const_logic_0 = B_fifo_6_full_n)));
    end process;


    ap_condition_329_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_329 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_498_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln578_reg_629)
    begin
                ap_condition_498 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln578_reg_629 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln578_fu_350_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln578_fu_350_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_first_iter_0_phi_fu_324_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_498)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_498)) then 
                ap_phi_mux_first_iter_0_phi_fu_324_p4 <= ap_const_lv1_0;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_0_phi_fu_324_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_first_iter_0_phi_fu_324_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_first_iter_0_phi_fu_324_p4 <= ap_const_lv1_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_106, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_k8_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k8_fu_102, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_k8_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_k8_load <= k8_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n_fu_98, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_98;
        end if; 
    end process;

    bitcast_ln585_fu_548_p1 <= v179_fu_509_p19;
    icmp_ln578_fu_350_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln583_fu_374_p2 <= "1" when (ap_sig_allocacmp_n_load = ap_const_lv4_8) else "0";
    or_ln578_fu_380_p2 <= (icmp_ln583_fu_374_p2 or ap_phi_mux_first_iter_0_phi_fu_324_p4);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln578_1_fu_394_p3 <= 
        add_ln578_fu_368_p2 when (icmp_ln583_fu_374_p2(0) = '1') else 
        ap_sig_allocacmp_k8_load;
    select_ln578_fu_386_p3 <= 
        ap_const_lv4_0 when (icmp_ln583_fu_374_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln583_fu_415_p1 <= select_ln578_fu_386_p3(3 - 1 downto 0);
    v168_0_address0 <= v168_0_addr_reg_637;

    v168_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v168_0_ce0 <= ap_const_logic_1;
        else 
            v168_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_0_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_0_ce0 <= ap_const_logic_1;
        else 
            v169_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_1_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_1_ce0 <= ap_const_logic_1;
        else 
            v169_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_2_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_2_ce0 <= ap_const_logic_1;
        else 
            v169_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_3_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_3_ce0 <= ap_const_logic_1;
        else 
            v169_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_4_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_4_ce0 <= ap_const_logic_1;
        else 
            v169_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_5_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_5_ce0 <= ap_const_logic_1;
        else 
            v169_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_6_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_6_ce0 <= ap_const_logic_1;
        else 
            v169_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_7_address0 <= zext_ln578_fu_402_p1(3 - 1 downto 0);

    v169_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v169_7_ce0 <= ap_const_logic_1;
        else 
            v169_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v179_fu_509_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    zext_ln578_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln578_1_fu_394_p3),64));
end behav;
