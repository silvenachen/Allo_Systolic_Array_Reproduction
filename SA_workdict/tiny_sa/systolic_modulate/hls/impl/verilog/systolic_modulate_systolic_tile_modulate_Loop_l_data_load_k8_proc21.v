// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module systolic_modulate_systolic_tile_modulate_Loop_l_data_load_k8_proc21 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        A_fifo_din,
        A_fifo_num_data_valid,
        A_fifo_fifo_cap,
        A_fifo_full_n,
        A_fifo_write,
        B_fifo_12_din,
        B_fifo_12_num_data_valid,
        B_fifo_12_fifo_cap,
        B_fifo_12_full_n,
        B_fifo_12_write,
        B_fifo_10_din,
        B_fifo_10_num_data_valid,
        B_fifo_10_fifo_cap,
        B_fifo_10_full_n,
        B_fifo_10_write,
        B_fifo_8_din,
        B_fifo_8_num_data_valid,
        B_fifo_8_fifo_cap,
        B_fifo_8_full_n,
        B_fifo_8_write,
        B_fifo_6_din,
        B_fifo_6_num_data_valid,
        B_fifo_6_fifo_cap,
        B_fifo_6_full_n,
        B_fifo_6_write,
        B_fifo_4_din,
        B_fifo_4_num_data_valid,
        B_fifo_4_fifo_cap,
        B_fifo_4_full_n,
        B_fifo_4_write,
        B_fifo_2_din,
        B_fifo_2_num_data_valid,
        B_fifo_2_fifo_cap,
        B_fifo_2_full_n,
        B_fifo_2_write,
        B_fifo_din,
        B_fifo_num_data_valid,
        B_fifo_fifo_cap,
        B_fifo_full_n,
        B_fifo_write,
        B_fifo_14_din,
        B_fifo_14_num_data_valid,
        B_fifo_14_fifo_cap,
        B_fifo_14_full_n,
        B_fifo_14_write,
        start_out,
        start_write,
        v168_0_address0,
        v168_0_ce0,
        v168_0_q0,
        v169_0_address0,
        v169_0_ce0,
        v169_0_q0,
        v169_1_address0,
        v169_1_ce0,
        v169_1_q0,
        v169_2_address0,
        v169_2_ce0,
        v169_2_q0,
        v169_3_address0,
        v169_3_ce0,
        v169_3_q0,
        v169_4_address0,
        v169_4_ce0,
        v169_4_q0,
        v169_5_address0,
        v169_5_ce0,
        v169_5_q0,
        v169_6_address0,
        v169_6_ce0,
        v169_6_q0,
        v169_7_address0,
        v169_7_ce0,
        v169_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] A_fifo_din;
input  [2:0] A_fifo_num_data_valid;
input  [2:0] A_fifo_fifo_cap;
input   A_fifo_full_n;
output   A_fifo_write;
output  [31:0] B_fifo_12_din;
input  [4:0] B_fifo_12_num_data_valid;
input  [4:0] B_fifo_12_fifo_cap;
input   B_fifo_12_full_n;
output   B_fifo_12_write;
output  [31:0] B_fifo_10_din;
input  [4:0] B_fifo_10_num_data_valid;
input  [4:0] B_fifo_10_fifo_cap;
input   B_fifo_10_full_n;
output   B_fifo_10_write;
output  [31:0] B_fifo_8_din;
input  [4:0] B_fifo_8_num_data_valid;
input  [4:0] B_fifo_8_fifo_cap;
input   B_fifo_8_full_n;
output   B_fifo_8_write;
output  [31:0] B_fifo_6_din;
input  [4:0] B_fifo_6_num_data_valid;
input  [4:0] B_fifo_6_fifo_cap;
input   B_fifo_6_full_n;
output   B_fifo_6_write;
output  [31:0] B_fifo_4_din;
input  [4:0] B_fifo_4_num_data_valid;
input  [4:0] B_fifo_4_fifo_cap;
input   B_fifo_4_full_n;
output   B_fifo_4_write;
output  [31:0] B_fifo_2_din;
input  [4:0] B_fifo_2_num_data_valid;
input  [4:0] B_fifo_2_fifo_cap;
input   B_fifo_2_full_n;
output   B_fifo_2_write;
output  [31:0] B_fifo_din;
input  [4:0] B_fifo_num_data_valid;
input  [4:0] B_fifo_fifo_cap;
input   B_fifo_full_n;
output   B_fifo_write;
output  [31:0] B_fifo_14_din;
input  [4:0] B_fifo_14_num_data_valid;
input  [4:0] B_fifo_14_fifo_cap;
input   B_fifo_14_full_n;
output   B_fifo_14_write;
output   start_out;
output   start_write;
output  [2:0] v168_0_address0;
output   v168_0_ce0;
input  [31:0] v168_0_q0;
output  [2:0] v169_0_address0;
output   v169_0_ce0;
input  [31:0] v169_0_q0;
output  [2:0] v169_1_address0;
output   v169_1_ce0;
input  [31:0] v169_1_q0;
output  [2:0] v169_2_address0;
output   v169_2_ce0;
input  [31:0] v169_2_q0;
output  [2:0] v169_3_address0;
output   v169_3_ce0;
input  [31:0] v169_3_q0;
output  [2:0] v169_4_address0;
output   v169_4_ce0;
input  [31:0] v169_4_q0;
output  [2:0] v169_5_address0;
output   v169_5_ce0;
input  [31:0] v169_5_q0;
output  [2:0] v169_6_address0;
output   v169_6_ce0;
input  [31:0] v169_6_q0;
output  [2:0] v169_7_address0;
output   v169_7_ce0;
input  [31:0] v169_7_q0;

reg ap_idle;
reg A_fifo_write;
reg B_fifo_12_write;
reg B_fifo_10_write;
reg B_fifo_8_write;
reg B_fifo_6_write;
reg B_fifo_4_write;
reg B_fifo_2_write;
reg B_fifo_write;
reg B_fifo_14_write;
reg start_write;
reg v168_0_ce0;
reg v169_0_ce0;
reg v169_1_ce0;
reg v169_2_ce0;
reg v169_3_ce0;
reg v169_4_ce0;
reg v169_5_ce0;
reg v169_6_ce0;
reg v169_7_ce0;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln578_reg_633;
reg   [0:0] or_ln578_reg_633_pp0_iter1_reg;
reg   [2:0] trunc_ln583_reg_682;
reg   [2:0] trunc_ln583_reg_682_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln578_fu_350_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_fifo_blk_n;
wire    ap_block_pp0_stage0;
reg    B_fifo_blk_n;
reg    B_fifo_2_blk_n;
reg    B_fifo_4_blk_n;
reg    B_fifo_6_blk_n;
reg    B_fifo_8_blk_n;
reg    B_fifo_10_blk_n;
reg    B_fifo_12_blk_n;
reg    B_fifo_14_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln578_reg_629;
wire   [0:0] or_ln578_fu_380_p2;
reg   [2:0] v168_0_addr_reg_637;
wire   [2:0] trunc_ln583_fu_415_p1;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_324_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln578_fu_402_p1;
reg   [3:0] n_fu_98;
wire   [3:0] add_ln583_fu_419_p2;
reg   [3:0] ap_sig_allocacmp_n_load;
reg   [3:0] k8_fu_102;
wire   [3:0] select_ln578_1_fu_394_p3;
reg   [3:0] ap_sig_allocacmp_k8_load;
reg   [6:0] indvar_flatten_fu_106;
wire   [6:0] add_ln578_1_fu_356_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] v169_7_load1_fu_110;
reg   [31:0] v169_6_load3_fu_114;
reg   [31:0] v169_5_load5_fu_118;
reg   [31:0] v169_4_load7_fu_122;
reg   [31:0] v169_3_load9_fu_126;
reg   [31:0] v169_2_load11_fu_130;
reg   [31:0] v169_1_load13_fu_134;
reg   [31:0] v169_0_load15_fu_138;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln585_fu_548_p1;
wire   [0:0] icmp_ln583_fu_374_p2;
wire   [3:0] add_ln578_fu_368_p2;
wire   [3:0] select_ln578_fu_386_p3;
wire   [31:0] v179_fu_509_p17;
wire   [31:0] v179_fu_509_p19;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_498;
reg    ap_condition_329;
wire   [2:0] v179_fu_509_p1;
wire   [2:0] v179_fu_509_p3;
wire   [2:0] v179_fu_509_p5;
wire   [2:0] v179_fu_509_p7;
wire  signed [2:0] v179_fu_509_p9;
wire  signed [2:0] v179_fu_509_p11;
wire  signed [2:0] v179_fu_509_p13;
wire  signed [2:0] v179_fu_509_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 n_fu_98 = 4'd0;
#0 k8_fu_102 = 4'd0;
#0 indvar_flatten_fu_106 = 7'd0;
#0 v169_7_load1_fu_110 = 32'd0;
#0 v169_6_load3_fu_114 = 32'd0;
#0 v169_5_load5_fu_118 = 32'd0;
#0 v169_4_load7_fu_122 = 32'd0;
#0 v169_3_load9_fu_126 = 32'd0;
#0 v169_2_load11_fu_130 = 32'd0;
#0 v169_1_load13_fu_134 = 32'd0;
#0 v169_0_load15_fu_138 = 32'd0;
end

systolic_modulate_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U18(
    .din0(v169_0_load15_fu_138),
    .din1(v169_1_load13_fu_134),
    .din2(v169_2_load11_fu_130),
    .din3(v169_3_load9_fu_126),
    .din4(v169_4_load7_fu_122),
    .din5(v169_5_load5_fu_118),
    .din6(v169_6_load3_fu_114),
    .din7(v169_7_load1_fu_110),
    .def(v179_fu_509_p17),
    .sel(trunc_ln583_reg_682_pp0_iter1_reg),
    .dout(v179_fu_509_p19)
);

systolic_modulate_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_329)) begin
        if ((icmp_ln578_fu_350_p2 == 1'd0)) begin
            indvar_flatten_fu_106 <= add_ln578_1_fu_356_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_106 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_329)) begin
        if ((icmp_ln578_fu_350_p2 == 1'd0)) begin
            k8_fu_102 <= select_ln578_1_fu_394_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k8_fu_102 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_329)) begin
        if ((icmp_ln578_fu_350_p2 == 1'd0)) begin
            n_fu_98 <= add_ln583_fu_419_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_98 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln578_reg_629 <= icmp_ln578_fu_350_p2;
        or_ln578_reg_633 <= or_ln578_fu_380_p2;
        or_ln578_reg_633_pp0_iter1_reg <= or_ln578_reg_633;
        trunc_ln583_reg_682 <= trunc_ln583_fu_415_p1;
        trunc_ln583_reg_682_pp0_iter1_reg <= trunc_ln583_reg_682;
        v168_0_addr_reg_637 <= zext_ln578_fu_402_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln578_reg_633 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_0_load15_fu_138 <= v169_0_q0;
        v169_1_load13_fu_134 <= v169_1_q0;
        v169_2_load11_fu_130 <= v169_2_q0;
        v169_3_load9_fu_126 <= v169_3_q0;
        v169_4_load7_fu_122 <= v169_4_q0;
        v169_5_load5_fu_118 <= v169_5_q0;
        v169_6_load3_fu_114 <= v169_6_q0;
        v169_7_load1_fu_110 <= v169_7_q0;
    end
end

always @ (*) begin
    if (((or_ln578_reg_633_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        A_fifo_blk_n = A_fifo_full_n;
    end else begin
        A_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln578_reg_633_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_fifo_write = 1'b1;
    end else begin
        A_fifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_10_blk_n = B_fifo_10_full_n;
    end else begin
        B_fifo_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_10_write = 1'b1;
    end else begin
        B_fifo_10_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_12_blk_n = B_fifo_12_full_n;
    end else begin
        B_fifo_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_12_write = 1'b1;
    end else begin
        B_fifo_12_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_14_blk_n = B_fifo_14_full_n;
    end else begin
        B_fifo_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_14_write = 1'b1;
    end else begin
        B_fifo_14_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_2_blk_n = B_fifo_2_full_n;
    end else begin
        B_fifo_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_2_write = 1'b1;
    end else begin
        B_fifo_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_4_blk_n = B_fifo_4_full_n;
    end else begin
        B_fifo_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_4_write = 1'b1;
    end else begin
        B_fifo_4_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_6_blk_n = B_fifo_6_full_n;
    end else begin
        B_fifo_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_6_write = 1'b1;
    end else begin
        B_fifo_6_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_8_blk_n = B_fifo_8_full_n;
    end else begin
        B_fifo_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_8_write = 1'b1;
    end else begin
        B_fifo_8_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_blk_n = B_fifo_full_n;
    end else begin
        B_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_write = 1'b1;
    end else begin
        B_fifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln578_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_498)) begin
            ap_phi_mux_first_iter_0_phi_fu_324_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_0_phi_fu_324_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_0_phi_fu_324_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_324_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_106;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k8_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k8_load = k8_fu_102;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_n_load = 4'd0;
    end else begin
        ap_sig_allocacmp_n_load = n_fu_98;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v168_0_ce0 = 1'b1;
    end else begin
        v168_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_0_ce0 = 1'b1;
    end else begin
        v169_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_1_ce0 = 1'b1;
    end else begin
        v169_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_2_ce0 = 1'b1;
    end else begin
        v169_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_3_ce0 = 1'b1;
    end else begin
        v169_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_4_ce0 = 1'b1;
    end else begin
        v169_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_5_ce0 = 1'b1;
    end else begin
        v169_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_6_ce0 = 1'b1;
    end else begin
        v169_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v169_7_ce0 = 1'b1;
    end else begin
        v169_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_fifo_din = v168_0_q0;

assign B_fifo_10_din = bitcast_ln585_fu_548_p1;

assign B_fifo_12_din = bitcast_ln585_fu_548_p1;

assign B_fifo_14_din = bitcast_ln585_fu_548_p1;

assign B_fifo_2_din = bitcast_ln585_fu_548_p1;

assign B_fifo_4_din = bitcast_ln585_fu_548_p1;

assign B_fifo_6_din = bitcast_ln585_fu_548_p1;

assign B_fifo_8_din = bitcast_ln585_fu_548_p1;

assign B_fifo_din = bitcast_ln585_fu_548_p1;

assign add_ln578_1_fu_356_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln578_fu_368_p2 = (ap_sig_allocacmp_k8_load + 4'd1);

assign add_ln583_fu_419_p2 = (select_ln578_fu_386_p3 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((trunc_ln583_reg_682_pp0_iter1_reg == 3'd4) & (1'b0 == B_fifo_8_full_n)) | ((trunc_ln583_reg_682_pp0_iter1_reg == 3'd5) & (1'b0 == B_fifo_10_full_n)) | ((trunc_ln583_reg_682_pp0_iter1_reg == 3'd6) & (1'b0 == B_fifo_12_full_n)) | ((or_ln578_reg_633_pp0_iter1_reg == 1'd1) & (1'b0 == A_fifo_full_n)) | ((trunc_ln583_reg_682_pp0_iter1_reg == 3'd7) & (1'b0 == B_fifo_14_full_n)) | ((trunc_ln583_reg_682_pp0_iter1_reg == 3'd0) & (1'b0 == B_fifo_full_n)) | ((trunc_ln583_reg_682_pp0_iter1_reg == 3'd1) & (1'b0 == B_fifo_2_full_n)) | ((trunc_ln583_reg_682_pp0_iter1_reg == 3'd2) & (1'b0 == B_fifo_4_full_n)) | ((trunc_ln583_reg_682_pp0_iter1_reg == 3'd3) & (1'b0 == B_fifo_6_full_n)));
end

always @ (*) begin
    ap_condition_329 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_498 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln578_reg_629 == 1'd0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign bitcast_ln585_fu_548_p1 = v179_fu_509_p19;

assign icmp_ln578_fu_350_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln583_fu_374_p2 = ((ap_sig_allocacmp_n_load == 4'd8) ? 1'b1 : 1'b0);

assign or_ln578_fu_380_p2 = (icmp_ln583_fu_374_p2 | ap_phi_mux_first_iter_0_phi_fu_324_p4);

assign select_ln578_1_fu_394_p3 = ((icmp_ln583_fu_374_p2[0:0] == 1'b1) ? add_ln578_fu_368_p2 : ap_sig_allocacmp_k8_load);

assign select_ln578_fu_386_p3 = ((icmp_ln583_fu_374_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_n_load);

assign start_out = real_start;

assign trunc_ln583_fu_415_p1 = select_ln578_fu_386_p3[2:0];

assign v168_0_address0 = v168_0_addr_reg_637;

assign v169_0_address0 = zext_ln578_fu_402_p1;

assign v169_1_address0 = zext_ln578_fu_402_p1;

assign v169_2_address0 = zext_ln578_fu_402_p1;

assign v169_3_address0 = zext_ln578_fu_402_p1;

assign v169_4_address0 = zext_ln578_fu_402_p1;

assign v169_5_address0 = zext_ln578_fu_402_p1;

assign v169_6_address0 = zext_ln578_fu_402_p1;

assign v169_7_address0 = zext_ln578_fu_402_p1;

assign v179_fu_509_p17 = 'bx;

assign zext_ln578_fu_402_p1 = select_ln578_1_fu_394_p3;

endmodule //systolic_modulate_systolic_tile_modulate_Loop_l_data_load_k8_proc21
