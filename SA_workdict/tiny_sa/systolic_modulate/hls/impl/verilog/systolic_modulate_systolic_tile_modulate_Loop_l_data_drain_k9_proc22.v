// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module systolic_modulate_systolic_tile_modulate_Loop_l_data_drain_k9_proc22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        A_fifo_8_dout,
        A_fifo_8_num_data_valid,
        A_fifo_8_fifo_cap,
        A_fifo_8_empty_n,
        A_fifo_8_read,
        B_fifo_13_dout,
        B_fifo_13_num_data_valid,
        B_fifo_13_fifo_cap,
        B_fifo_13_empty_n,
        B_fifo_13_read,
        B_fifo_11_dout,
        B_fifo_11_num_data_valid,
        B_fifo_11_fifo_cap,
        B_fifo_11_empty_n,
        B_fifo_11_read,
        B_fifo_9_dout,
        B_fifo_9_num_data_valid,
        B_fifo_9_fifo_cap,
        B_fifo_9_empty_n,
        B_fifo_9_read,
        B_fifo_7_dout,
        B_fifo_7_num_data_valid,
        B_fifo_7_fifo_cap,
        B_fifo_7_empty_n,
        B_fifo_7_read,
        B_fifo_5_dout,
        B_fifo_5_num_data_valid,
        B_fifo_5_fifo_cap,
        B_fifo_5_empty_n,
        B_fifo_5_read,
        B_fifo_3_dout,
        B_fifo_3_num_data_valid,
        B_fifo_3_fifo_cap,
        B_fifo_3_empty_n,
        B_fifo_3_read,
        B_fifo_1_dout,
        B_fifo_1_num_data_valid,
        B_fifo_1_fifo_cap,
        B_fifo_1_empty_n,
        B_fifo_1_read,
        B_fifo_15_dout,
        B_fifo_15_num_data_valid,
        B_fifo_15_fifo_cap,
        B_fifo_15_empty_n,
        B_fifo_15_read
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] A_fifo_8_dout;
input  [2:0] A_fifo_8_num_data_valid;
input  [2:0] A_fifo_8_fifo_cap;
input   A_fifo_8_empty_n;
output   A_fifo_8_read;
input  [31:0] B_fifo_13_dout;
input  [4:0] B_fifo_13_num_data_valid;
input  [4:0] B_fifo_13_fifo_cap;
input   B_fifo_13_empty_n;
output   B_fifo_13_read;
input  [31:0] B_fifo_11_dout;
input  [4:0] B_fifo_11_num_data_valid;
input  [4:0] B_fifo_11_fifo_cap;
input   B_fifo_11_empty_n;
output   B_fifo_11_read;
input  [31:0] B_fifo_9_dout;
input  [4:0] B_fifo_9_num_data_valid;
input  [4:0] B_fifo_9_fifo_cap;
input   B_fifo_9_empty_n;
output   B_fifo_9_read;
input  [31:0] B_fifo_7_dout;
input  [4:0] B_fifo_7_num_data_valid;
input  [4:0] B_fifo_7_fifo_cap;
input   B_fifo_7_empty_n;
output   B_fifo_7_read;
input  [31:0] B_fifo_5_dout;
input  [4:0] B_fifo_5_num_data_valid;
input  [4:0] B_fifo_5_fifo_cap;
input   B_fifo_5_empty_n;
output   B_fifo_5_read;
input  [31:0] B_fifo_3_dout;
input  [4:0] B_fifo_3_num_data_valid;
input  [4:0] B_fifo_3_fifo_cap;
input   B_fifo_3_empty_n;
output   B_fifo_3_read;
input  [31:0] B_fifo_1_dout;
input  [4:0] B_fifo_1_num_data_valid;
input  [4:0] B_fifo_1_fifo_cap;
input   B_fifo_1_empty_n;
output   B_fifo_1_read;
input  [31:0] B_fifo_15_dout;
input  [4:0] B_fifo_15_num_data_valid;
input  [4:0] B_fifo_15_fifo_cap;
input   B_fifo_15_empty_n;
output   B_fifo_15_read;

reg ap_idle;
reg A_fifo_8_read;
reg B_fifo_13_read;
reg B_fifo_11_read;
reg B_fifo_9_read;
reg B_fifo_7_read;
reg B_fifo_5_read;
reg B_fifo_3_read;
reg B_fifo_1_read;
reg B_fifo_15_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln628_reg_231;
reg   [2:0] trunc_ln633_reg_235;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln628_fu_158_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_fifo_8_blk_n;
wire    ap_block_pp0_stage0;
reg    B_fifo_1_blk_n;
reg    B_fifo_3_blk_n;
reg    B_fifo_5_blk_n;
reg    B_fifo_7_blk_n;
reg    B_fifo_9_blk_n;
reg    B_fifo_11_blk_n;
reg    B_fifo_13_blk_n;
reg    B_fifo_15_blk_n;
reg   [0:0] icmp_ln628_reg_227;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln628_fu_179_p2;
wire   [2:0] trunc_ln633_fu_193_p1;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_137_p4;
wire    ap_loop_init;
reg   [3:0] n1_fu_72;
wire   [3:0] add_ln633_fu_197_p2;
reg   [3:0] ap_sig_allocacmp_n1_load;
reg   [6:0] indvar_flatten_fu_76;
wire   [6:0] add_ln628_fu_164_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln633_fu_173_p2;
wire   [3:0] select_ln628_fu_185_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_293;
reg    ap_condition_202;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 n1_fu_72 = 4'd0;
#0 indvar_flatten_fu_76 = 7'd0;
end

systolic_modulate_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_202)) begin
        if ((icmp_ln628_fu_158_p2 == 1'd0)) begin
            indvar_flatten_fu_76 <= add_ln628_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_76 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_202)) begin
        if ((icmp_ln628_fu_158_p2 == 1'd0)) begin
            n1_fu_72 <= add_ln633_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n1_fu_72 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln628_reg_227 <= icmp_ln628_fu_158_p2;
        or_ln628_reg_231 <= or_ln628_fu_179_p2;
        trunc_ln633_reg_235 <= trunc_ln633_fu_193_p1;
    end
end

always @ (*) begin
    if (((or_ln628_reg_231 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        A_fifo_8_blk_n = A_fifo_8_empty_n;
    end else begin
        A_fifo_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln628_reg_231 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_fifo_8_read = 1'b1;
    end else begin
        A_fifo_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_11_blk_n = B_fifo_11_empty_n;
    end else begin
        B_fifo_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_11_read = 1'b1;
    end else begin
        B_fifo_11_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_13_blk_n = B_fifo_13_empty_n;
    end else begin
        B_fifo_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_13_read = 1'b1;
    end else begin
        B_fifo_13_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_15_blk_n = B_fifo_15_empty_n;
    end else begin
        B_fifo_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_15_read = 1'b1;
    end else begin
        B_fifo_15_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_1_blk_n = B_fifo_1_empty_n;
    end else begin
        B_fifo_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_1_read = 1'b1;
    end else begin
        B_fifo_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_3_blk_n = B_fifo_3_empty_n;
    end else begin
        B_fifo_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_3_read = 1'b1;
    end else begin
        B_fifo_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_5_blk_n = B_fifo_5_empty_n;
    end else begin
        B_fifo_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_5_read = 1'b1;
    end else begin
        B_fifo_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_7_blk_n = B_fifo_7_empty_n;
    end else begin
        B_fifo_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_7_read = 1'b1;
    end else begin
        B_fifo_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        B_fifo_9_blk_n = B_fifo_9_empty_n;
    end else begin
        B_fifo_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln633_reg_235 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_fifo_9_read = 1'b1;
    end else begin
        B_fifo_9_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln628_fu_158_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_293)) begin
            ap_phi_mux_first_iter_0_phi_fu_137_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_0_phi_fu_137_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_0_phi_fu_137_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_137_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_76;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_n1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_n1_load = n1_fu_72;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln628_fu_164_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln633_fu_197_p2 = (select_ln628_fu_185_p3 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((trunc_ln633_reg_235 == 3'd3) & (1'b0 == B_fifo_7_empty_n)) | ((trunc_ln633_reg_235 == 3'd4) & (1'b0 == B_fifo_9_empty_n)) | ((trunc_ln633_reg_235 == 3'd5) & (1'b0 == B_fifo_11_empty_n)) | ((trunc_ln633_reg_235 == 3'd6) & (1'b0 == B_fifo_13_empty_n)) | ((or_ln628_reg_231 == 1'd1) & (1'b0 == A_fifo_8_empty_n)) | ((trunc_ln633_reg_235 == 3'd7) & (1'b0 == B_fifo_15_empty_n)) | ((trunc_ln633_reg_235 == 3'd0) & (1'b0 == B_fifo_1_empty_n)) | ((trunc_ln633_reg_235 == 3'd1) & (1'b0 == B_fifo_3_empty_n)) | ((trunc_ln633_reg_235 == 3'd2) & (1'b0 == B_fifo_5_empty_n)));
end

always @ (*) begin
    ap_condition_202 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_293 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln628_reg_227 == 1'd0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln628_fu_158_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln633_fu_173_p2 = ((ap_sig_allocacmp_n1_load == 4'd8) ? 1'b1 : 1'b0);

assign or_ln628_fu_179_p2 = (icmp_ln633_fu_173_p2 | ap_phi_mux_first_iter_0_phi_fu_137_p4);

assign select_ln628_fu_185_p3 = ((icmp_ln633_fu_173_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_n1_load);

assign trunc_ln633_fu_193_p1 = select_ln628_fu_185_p3[2:0];

endmodule //systolic_modulate_systolic_tile_modulate_Loop_l_data_drain_k9_proc22
