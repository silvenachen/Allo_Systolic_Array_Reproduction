-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_modulate_dataflow_in_loop_l_ni_1_Loop_l_load_B_tile_bk_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    local_B_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_ce0 : OUT STD_LOGIC;
    local_B_we0 : OUT STD_LOGIC;
    local_B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_1_ce0 : OUT STD_LOGIC;
    local_B_1_we0 : OUT STD_LOGIC;
    local_B_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_2_ce0 : OUT STD_LOGIC;
    local_B_2_we0 : OUT STD_LOGIC;
    local_B_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_3_ce0 : OUT STD_LOGIC;
    local_B_3_we0 : OUT STD_LOGIC;
    local_B_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_B_3_19_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_3_19_ce0 : OUT STD_LOGIC;
    local_B_3_19_we0 : OUT STD_LOGIC;
    local_B_3_19_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_B_2_18_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_2_18_ce0 : OUT STD_LOGIC;
    local_B_2_18_we0 : OUT STD_LOGIC;
    local_B_2_18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_B_1_17_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_1_17_ce0 : OUT STD_LOGIC;
    local_B_1_17_we0 : OUT STD_LOGIC;
    local_B_1_17_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_4_ce0 : OUT STD_LOGIC;
    local_B_4_we0 : OUT STD_LOGIC;
    local_B_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    indvars_iv26 : IN STD_LOGIC_VECTOR (4 downto 0);
    v218_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v218_ce0 : OUT STD_LOGIC;
    v218_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of systolic_modulate_dataflow_in_loop_l_ni_1_Loop_l_load_B_tile_bk_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln666_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal select_ln666_1_fu_285_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln666_1_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln667_fu_348_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln667_reg_430 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln669_2_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln666_1_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bj_fu_82 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln667_fu_352_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_bj_load : STD_LOGIC_VECTOR (3 downto 0);
    signal bk_fu_86 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_bk_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_90 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln666_1_fu_253_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal v232_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_217_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln667_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln666_fu_265_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln666_fu_293_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_305_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_297_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln669_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln666_fu_277_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln666_fu_225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln667_fu_323_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln669_fu_327_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln669_fu_317_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln669_1_fu_333_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln669_1_fu_337_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_152 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component systolic_modulate_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component systolic_modulate_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    bj_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_152)) then
                if ((icmp_ln666_fu_247_p2 = ap_const_lv1_0)) then 
                    bj_fu_82 <= add_ln667_fu_352_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    bj_fu_82 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    bk_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_152)) then
                if ((icmp_ln666_fu_247_p2 = ap_const_lv1_0)) then 
                    bk_fu_86 <= select_ln666_1_fu_285_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    bk_fu_86 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_152)) then
                if ((icmp_ln666_fu_247_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_90 <= add_ln666_1_fu_253_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_90 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln666_1_reg_420 <= select_ln666_1_fu_285_p3;
                trunc_ln667_reg_430 <= trunc_ln667_fu_348_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln666_1_fu_253_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln666_fu_265_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_bk_load) + unsigned(ap_const_lv4_1));
    add_ln667_fu_352_p2 <= std_logic_vector(unsigned(select_ln666_fu_277_p3) + unsigned(ap_const_lv4_1));
    add_ln669_1_fu_337_p2 <= std_logic_vector(unsigned(sub_ln669_fu_317_p2) + unsigned(zext_ln669_1_fu_333_p1));
    add_ln669_fu_327_p2 <= std_logic_vector(unsigned(zext_ln666_fu_225_p1) + unsigned(zext_ln667_fu_323_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_condition_152_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_152 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln666_fu_247_p2, ap_start_int)
    begin
        if (((icmp_ln666_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_bj_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, bj_fu_82, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_bj_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_bj_load <= bj_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_bk_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, bk_fu_86, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_bk_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_bk_load <= bk_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_90, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_90;
        end if; 
    end process;

    icmp_ln666_fu_247_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln667_fu_271_p2 <= "1" when (ap_sig_allocacmp_bj_load = ap_const_lv4_8) else "0";
    local_B_1_17_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_1_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_1_17_ce0 <= ap_const_logic_1;
        else 
            local_B_1_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_1_17_d0 <= v232_fu_384_p1;

    local_B_1_17_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_1))) then 
            local_B_1_17_we0 <= ap_const_logic_1;
        else 
            local_B_1_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_1_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_1_ce0 <= ap_const_logic_1;
        else 
            local_B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_1_d0 <= v232_fu_384_p1;

    local_B_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_6))) then 
            local_B_1_we0 <= ap_const_logic_1;
        else 
            local_B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_2_18_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_2_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_2_18_ce0 <= ap_const_logic_1;
        else 
            local_B_2_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_2_18_d0 <= v232_fu_384_p1;

    local_B_2_18_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_2))) then 
            local_B_2_18_we0 <= ap_const_logic_1;
        else 
            local_B_2_18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_2_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_2_ce0 <= ap_const_logic_1;
        else 
            local_B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_2_d0 <= v232_fu_384_p1;

    local_B_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_5))) then 
            local_B_2_we0 <= ap_const_logic_1;
        else 
            local_B_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_3_19_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_3_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_3_19_ce0 <= ap_const_logic_1;
        else 
            local_B_3_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_3_19_d0 <= v232_fu_384_p1;

    local_B_3_19_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_3))) then 
            local_B_3_19_we0 <= ap_const_logic_1;
        else 
            local_B_3_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_3_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_3_ce0 <= ap_const_logic_1;
        else 
            local_B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_3_d0 <= v232_fu_384_p1;

    local_B_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_4))) then 
            local_B_3_we0 <= ap_const_logic_1;
        else 
            local_B_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_4_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_4_ce0 <= ap_const_logic_1;
        else 
            local_B_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_4_d0 <= v232_fu_384_p1;

    local_B_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_0))) then 
            local_B_4_we0 <= ap_const_logic_1;
        else 
            local_B_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_address0 <= zext_ln666_1_fu_373_p1(3 - 1 downto 0);

    local_B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_ce0 <= ap_const_logic_1;
        else 
            local_B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_B_d0 <= v232_fu_384_p1;

    local_B_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln667_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln667_reg_430 = ap_const_lv3_7))) then 
            local_B_we0 <= ap_const_logic_1;
        else 
            local_B_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln666_1_fu_285_p3 <= 
        add_ln666_fu_265_p2 when (icmp_ln667_fu_271_p2(0) = '1') else 
        ap_sig_allocacmp_bk_load;
    select_ln666_fu_277_p3 <= 
        ap_const_lv4_0 when (icmp_ln667_fu_271_p2(0) = '1') else 
        ap_sig_allocacmp_bj_load;
    sub_ln669_fu_317_p2 <= std_logic_vector(unsigned(tmp_1_fu_297_p3) - unsigned(zext_ln669_fu_313_p1));
    tmp_1_fu_297_p3 <= (trunc_ln666_fu_293_p1 & ap_const_lv8_0);
    tmp_2_fu_305_p3 <= (select_ln666_1_fu_285_p3 & ap_const_lv6_0);
    tmp_fu_217_p3 <= (indvars_iv26 & ap_const_lv3_0);
    trunc_ln666_fu_293_p1 <= select_ln666_1_fu_285_p3(3 - 1 downto 0);
    trunc_ln667_fu_348_p1 <= select_ln666_fu_277_p3(3 - 1 downto 0);
    v218_address0 <= zext_ln669_2_fu_343_p1(11 - 1 downto 0);

    v218_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v218_ce0 <= ap_const_logic_1;
        else 
            v218_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v232_fu_384_p1 <= v218_q0;
    zext_ln666_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln666_1_reg_420),64));
    zext_ln666_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_217_p3),9));
    zext_ln667_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln666_fu_277_p3),9));
    zext_ln669_1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln669_fu_327_p2),11));
    zext_ln669_2_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln669_1_fu_337_p2),64));
    zext_ln669_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_305_p3),11));
end behav;
