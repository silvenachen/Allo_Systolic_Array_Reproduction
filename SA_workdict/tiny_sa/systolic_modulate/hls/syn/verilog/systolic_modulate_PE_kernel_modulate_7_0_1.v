// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module systolic_modulate_PE_kernel_modulate_7_0_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        A_fifo_7_dout,
        A_fifo_7_num_data_valid,
        A_fifo_7_fifo_cap,
        A_fifo_7_empty_n,
        A_fifo_7_read,
        B_fifo_7_0_dout,
        B_fifo_7_0_num_data_valid,
        B_fifo_7_0_fifo_cap,
        B_fifo_7_0_empty_n,
        B_fifo_7_0_read,
        A_fifo_8_din,
        A_fifo_8_num_data_valid,
        A_fifo_8_fifo_cap,
        A_fifo_8_full_n,
        A_fifo_8_write,
        B_fifo_7_1_din,
        B_fifo_7_1_num_data_valid,
        B_fifo_7_1_fifo_cap,
        B_fifo_7_1_full_n,
        B_fifo_7_1_write,
        v151_7_0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] A_fifo_7_dout;
input  [2:0] A_fifo_7_num_data_valid;
input  [2:0] A_fifo_7_fifo_cap;
input   A_fifo_7_empty_n;
output   A_fifo_7_read;
input  [31:0] B_fifo_7_0_dout;
input  [4:0] B_fifo_7_0_num_data_valid;
input  [4:0] B_fifo_7_0_fifo_cap;
input   B_fifo_7_0_empty_n;
output   B_fifo_7_0_read;
output  [31:0] A_fifo_8_din;
input  [2:0] A_fifo_8_num_data_valid;
input  [2:0] A_fifo_8_fifo_cap;
input   A_fifo_8_full_n;
output   A_fifo_8_write;
output  [31:0] B_fifo_7_1_din;
input  [4:0] B_fifo_7_1_num_data_valid;
input  [4:0] B_fifo_7_1_fifo_cap;
input   B_fifo_7_1_full_n;
output   B_fifo_7_1_write;
output  [31:0] v151_7_0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_fifo_7_read;
reg B_fifo_7_0_read;
reg A_fifo_8_write;
reg B_fifo_7_1_write;
reg[31:0] v151_7_0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_fifo_7_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln540_reg_164;
reg    B_fifo_7_0_blk_n;
reg    A_fifo_8_blk_n;
reg    B_fifo_7_1_blk_n;
wire   [0:0] icmp_ln540_fu_110_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] k7_2_fu_116_p2;
reg   [3:0] k7_2_reg_168;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_93_p2;
reg   [31:0] v162_reg_183;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] v163_fu_46;
wire   [31:0] grp_fu_89_p2;
reg   [31:0] ap_sig_allocacmp_v163_load_1;
wire    ap_CS_fsm_state8;
reg   [3:0] k7_fu_50;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage1_01001;
reg   [31:0] v151_7_0_preg;
wire   [31:0] grp_fu_93_p0;
wire   [31:0] grp_fu_93_p1;
reg    grp_fu_89_ce;
reg    grp_fu_93_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 v163_fu_46 = 32'd0;
#0 k7_fu_50 = 4'd0;
#0 v151_7_0_preg = 32'd0;
end

systolic_modulate_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_v163_load_1),
    .din1(v162_reg_183),
    .ce(grp_fu_89_ce),
    .dout(grp_fu_89_p2)
);

systolic_modulate_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_93_p0),
    .din1(grp_fu_93_p1),
    .ce(grp_fu_93_ce),
    .dout(grp_fu_93_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        v151_7_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            v151_7_0_preg <= v163_fu_46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        k7_fu_50 <= 4'd0;
    end else if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        k7_fu_50 <= k7_2_reg_168;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        v163_fu_46 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        v163_fu_46 <= grp_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln540_reg_164 <= icmp_ln540_fu_110_p2;
        k7_2_reg_168 <= k7_2_fu_116_p2;
        v162_reg_183 <= grp_fu_93_p2;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_fifo_7_blk_n = A_fifo_7_empty_n;
    end else begin
        A_fifo_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_fifo_7_read = 1'b1;
    end else begin
        A_fifo_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_fifo_8_blk_n = A_fifo_8_full_n;
    end else begin
        A_fifo_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_fifo_8_write = 1'b1;
    end else begin
        A_fifo_8_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_fifo_7_0_blk_n = B_fifo_7_0_empty_n;
    end else begin
        B_fifo_7_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_fifo_7_0_read = 1'b1;
    end else begin
        B_fifo_7_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_fifo_7_1_blk_n = B_fifo_7_1_full_n;
    end else begin
        B_fifo_7_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_fifo_7_1_write = 1'b1;
    end else begin
        B_fifo_7_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln540_fu_110_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_v163_load_1 = grp_fu_89_p2;
    end else begin
        ap_sig_allocacmp_v163_load_1 = v163_fu_46;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_89_ce = 1'b1;
    end else begin
        grp_fu_89_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_93_ce = 1'b1;
    end else begin
        grp_fu_93_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v151_7_0 = v163_fu_46;
    end else begin
        v151_7_0 = v151_7_0_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln540_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln540_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_fifo_8_din = A_fifo_7_dout;

assign B_fifo_7_1_din = B_fifo_7_0_dout;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((icmp_ln540_reg_164 == 1'd0) & (1'b0 == B_fifo_7_1_full_n)) | ((icmp_ln540_reg_164 == 1'd0) & (1'b0 == A_fifo_8_full_n)) | ((icmp_ln540_reg_164 == 1'd0) & (1'b0 == B_fifo_7_0_empty_n)) | ((icmp_ln540_reg_164 == 1'd0) & (1'b0 == A_fifo_7_empty_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_93_p0 = A_fifo_7_dout;

assign grp_fu_93_p1 = B_fifo_7_0_dout;

assign icmp_ln540_fu_110_p2 = ((k7_fu_50 == 4'd8) ? 1'b1 : 1'b0);

assign k7_2_fu_116_p2 = (k7_fu_50 + 4'd1);

endmodule //systolic_modulate_PE_kernel_modulate_7_0_1
