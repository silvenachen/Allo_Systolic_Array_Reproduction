// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module systolic_modulate_dataflow_in_loop_l_ni_1_Loop_l_load_B_tile_bk_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        local_B_address0,
        local_B_ce0,
        local_B_we0,
        local_B_d0,
        local_B_1_address0,
        local_B_1_ce0,
        local_B_1_we0,
        local_B_1_d0,
        local_B_2_address0,
        local_B_2_ce0,
        local_B_2_we0,
        local_B_2_d0,
        local_B_3_address0,
        local_B_3_ce0,
        local_B_3_we0,
        local_B_3_d0,
        local_B_3_19_address0,
        local_B_3_19_ce0,
        local_B_3_19_we0,
        local_B_3_19_d0,
        local_B_2_18_address0,
        local_B_2_18_ce0,
        local_B_2_18_we0,
        local_B_2_18_d0,
        local_B_1_17_address0,
        local_B_1_17_ce0,
        local_B_1_17_we0,
        local_B_1_17_d0,
        local_B_4_address0,
        local_B_4_ce0,
        local_B_4_we0,
        local_B_4_d0,
        indvars_iv26,
        v218_address0,
        v218_ce0,
        v218_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] local_B_address0;
output   local_B_ce0;
output   local_B_we0;
output  [31:0] local_B_d0;
output  [2:0] local_B_1_address0;
output   local_B_1_ce0;
output   local_B_1_we0;
output  [31:0] local_B_1_d0;
output  [2:0] local_B_2_address0;
output   local_B_2_ce0;
output   local_B_2_we0;
output  [31:0] local_B_2_d0;
output  [2:0] local_B_3_address0;
output   local_B_3_ce0;
output   local_B_3_we0;
output  [31:0] local_B_3_d0;
output  [2:0] local_B_3_19_address0;
output   local_B_3_19_ce0;
output   local_B_3_19_we0;
output  [31:0] local_B_3_19_d0;
output  [2:0] local_B_2_18_address0;
output   local_B_2_18_ce0;
output   local_B_2_18_we0;
output  [31:0] local_B_2_18_d0;
output  [2:0] local_B_1_17_address0;
output   local_B_1_17_ce0;
output   local_B_1_17_we0;
output  [31:0] local_B_1_17_d0;
output  [2:0] local_B_4_address0;
output   local_B_4_ce0;
output   local_B_4_we0;
output  [31:0] local_B_4_d0;
input  [4:0] indvars_iv26;
output  [10:0] v218_address0;
output   v218_ce0;
input  [31:0] v218_q0;

reg ap_idle;
reg local_B_ce0;
reg local_B_we0;
reg local_B_1_ce0;
reg local_B_1_we0;
reg local_B_2_ce0;
reg local_B_2_we0;
reg local_B_3_ce0;
reg local_B_3_we0;
reg local_B_3_19_ce0;
reg local_B_3_19_we0;
reg local_B_2_18_ce0;
reg local_B_2_18_we0;
reg local_B_1_17_ce0;
reg local_B_1_17_we0;
reg local_B_4_ce0;
reg local_B_4_we0;
reg v218_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln666_fu_247_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] select_ln666_1_fu_285_p3;
reg   [3:0] select_ln666_1_reg_420;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln667_fu_348_p1;
reg   [2:0] trunc_ln667_reg_430;
wire   [63:0] zext_ln669_2_fu_343_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln666_1_fu_373_p1;
reg   [3:0] bj_fu_82;
wire   [3:0] add_ln667_fu_352_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_bj_load;
reg   [3:0] bk_fu_86;
reg   [3:0] ap_sig_allocacmp_bk_load;
reg   [6:0] indvar_flatten_fu_90;
wire   [6:0] add_ln666_1_fu_253_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [31:0] v232_fu_384_p1;
wire   [7:0] tmp_fu_217_p3;
wire   [0:0] icmp_ln667_fu_271_p2;
wire   [3:0] add_ln666_fu_265_p2;
wire   [2:0] trunc_ln666_fu_293_p1;
wire   [9:0] tmp_2_fu_305_p3;
wire   [10:0] tmp_1_fu_297_p3;
wire   [10:0] zext_ln669_fu_313_p1;
wire   [3:0] select_ln666_fu_277_p3;
wire   [8:0] zext_ln666_fu_225_p1;
wire   [8:0] zext_ln667_fu_323_p1;
wire   [8:0] add_ln669_fu_327_p2;
wire   [10:0] sub_ln669_fu_317_p2;
wire   [10:0] zext_ln669_1_fu_333_p1;
wire   [10:0] add_ln669_1_fu_337_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_152;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 bj_fu_82 = 4'd0;
#0 bk_fu_86 = 4'd0;
#0 indvar_flatten_fu_90 = 7'd0;
end

systolic_modulate_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_152)) begin
        if ((icmp_ln666_fu_247_p2 == 1'd0)) begin
            bj_fu_82 <= add_ln667_fu_352_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            bj_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_152)) begin
        if ((icmp_ln666_fu_247_p2 == 1'd0)) begin
            bk_fu_86 <= select_ln666_1_fu_285_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            bk_fu_86 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_152)) begin
        if ((icmp_ln666_fu_247_p2 == 1'd0)) begin
            indvar_flatten_fu_90 <= add_ln666_1_fu_253_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln666_1_reg_420 <= select_ln666_1_fu_285_p3;
        trunc_ln667_reg_430 <= trunc_ln667_fu_348_p1;
    end
end

always @ (*) begin
    if (((icmp_ln666_fu_247_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bj_load = 4'd0;
    end else begin
        ap_sig_allocacmp_bj_load = bj_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bk_load = 4'd0;
    end else begin
        ap_sig_allocacmp_bk_load = bk_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_1_17_ce0 = 1'b1;
    end else begin
        local_B_1_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd1))) begin
        local_B_1_17_we0 = 1'b1;
    end else begin
        local_B_1_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_1_ce0 = 1'b1;
    end else begin
        local_B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd6))) begin
        local_B_1_we0 = 1'b1;
    end else begin
        local_B_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_2_18_ce0 = 1'b1;
    end else begin
        local_B_2_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd2))) begin
        local_B_2_18_we0 = 1'b1;
    end else begin
        local_B_2_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_2_ce0 = 1'b1;
    end else begin
        local_B_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd5))) begin
        local_B_2_we0 = 1'b1;
    end else begin
        local_B_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_3_19_ce0 = 1'b1;
    end else begin
        local_B_3_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd3))) begin
        local_B_3_19_we0 = 1'b1;
    end else begin
        local_B_3_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_3_ce0 = 1'b1;
    end else begin
        local_B_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd4))) begin
        local_B_3_we0 = 1'b1;
    end else begin
        local_B_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_4_ce0 = 1'b1;
    end else begin
        local_B_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd0))) begin
        local_B_4_we0 = 1'b1;
    end else begin
        local_B_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_ce0 = 1'b1;
    end else begin
        local_B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln667_reg_430 == 3'd7))) begin
        local_B_we0 = 1'b1;
    end else begin
        local_B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v218_ce0 = 1'b1;
    end else begin
        v218_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln666_1_fu_253_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln666_fu_265_p2 = (ap_sig_allocacmp_bk_load + 4'd1);

assign add_ln667_fu_352_p2 = (select_ln666_fu_277_p3 + 4'd1);

assign add_ln669_1_fu_337_p2 = (sub_ln669_fu_317_p2 + zext_ln669_1_fu_333_p1);

assign add_ln669_fu_327_p2 = (zext_ln666_fu_225_p1 + zext_ln667_fu_323_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_condition_152 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln666_fu_247_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln667_fu_271_p2 = ((ap_sig_allocacmp_bj_load == 4'd8) ? 1'b1 : 1'b0);

assign local_B_1_17_address0 = zext_ln666_1_fu_373_p1;

assign local_B_1_17_d0 = v232_fu_384_p1;

assign local_B_1_address0 = zext_ln666_1_fu_373_p1;

assign local_B_1_d0 = v232_fu_384_p1;

assign local_B_2_18_address0 = zext_ln666_1_fu_373_p1;

assign local_B_2_18_d0 = v232_fu_384_p1;

assign local_B_2_address0 = zext_ln666_1_fu_373_p1;

assign local_B_2_d0 = v232_fu_384_p1;

assign local_B_3_19_address0 = zext_ln666_1_fu_373_p1;

assign local_B_3_19_d0 = v232_fu_384_p1;

assign local_B_3_address0 = zext_ln666_1_fu_373_p1;

assign local_B_3_d0 = v232_fu_384_p1;

assign local_B_4_address0 = zext_ln666_1_fu_373_p1;

assign local_B_4_d0 = v232_fu_384_p1;

assign local_B_address0 = zext_ln666_1_fu_373_p1;

assign local_B_d0 = v232_fu_384_p1;

assign select_ln666_1_fu_285_p3 = ((icmp_ln667_fu_271_p2[0:0] == 1'b1) ? add_ln666_fu_265_p2 : ap_sig_allocacmp_bk_load);

assign select_ln666_fu_277_p3 = ((icmp_ln667_fu_271_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_bj_load);

assign sub_ln669_fu_317_p2 = (tmp_1_fu_297_p3 - zext_ln669_fu_313_p1);

assign tmp_1_fu_297_p3 = {{trunc_ln666_fu_293_p1}, {8'd0}};

assign tmp_2_fu_305_p3 = {{select_ln666_1_fu_285_p3}, {6'd0}};

assign tmp_fu_217_p3 = {{indvars_iv26}, {3'd0}};

assign trunc_ln666_fu_293_p1 = select_ln666_1_fu_285_p3[2:0];

assign trunc_ln667_fu_348_p1 = select_ln666_fu_277_p3[2:0];

assign v218_address0 = zext_ln669_2_fu_343_p1;

assign v232_fu_384_p1 = v218_q0;

assign zext_ln666_1_fu_373_p1 = select_ln666_1_reg_420;

assign zext_ln666_fu_225_p1 = tmp_fu_217_p3;

assign zext_ln667_fu_323_p1 = select_ln666_fu_277_p3;

assign zext_ln669_1_fu_333_p1 = add_ln669_fu_327_p2;

assign zext_ln669_2_fu_343_p1 = add_ln669_1_fu_337_p2;

assign zext_ln669_fu_313_p1 = tmp_2_fu_305_p3;

endmodule //systolic_modulate_dataflow_in_loop_l_ni_1_Loop_l_load_B_tile_bk_proc
